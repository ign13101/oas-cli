import fs from "fs";
import jsyaml from "js-yaml";
import Handlebars from "handlebars";
import { fileURLToPath } from 'url';
import { dirname } from 'path';

export function generateFile(resourceFile, options) {
    const dirName = dirname(fileURLToPath(import.meta.url));

    /* Check file existence and read contents */
    if (!fs.existsSync(resourceFile)) {
        console.error(`error: file at ${resourceFile} does not exist.`);
        process.exit(1);
    }
    let content = fs.readFileSync(resourceFile);
    if ((/\.yaml/).test(resourceFile)) content = jsyaml.load(content);
    else content = JSON.parse(content);
    
    /* Validate input data (only when using commander cli) */
    if ([content].flat().length !== options.resourceName.length) {
        throw new Error("Number of resource names provided does not match the resources count");
    } else if (options.resourceName.some(name => !Object.keys(options.operations).includes(name))) {
        throw new Error("Operations have not been declared for one or more resources");
    } else if ([content].flat().length !== options.idProperty.length) {
        throw new Error("Number of IDs provided does not match the resources count");
    } else if (options.idProperty.some((id, idx) => !Object.keys([content].flat()[idx]).includes(id))) {
        throw new Error("The ID must be one existing property of each resource");
    } else if (!(/^3\.[0-1]\.\d+(-.+)?$/).test(options.version)) {
        throw new Error("Invalid OpenAPI version");
    }

    /* Build operations object */
    let newOpObj = {};
    options.resourceName.forEach((rn) => {
        newOpObj[rn.toLowerCase()] = {};
        options.operations[rn].forEach(op => newOpObj[rn.toLowerCase()][op.toLowerCase()] = true)
    });

    /* Get attributes and types of each resource */
    let rObj = {};
    options.resourceName.forEach((rn, idx) => {
        rObj[rn.toLowerCase()] = {};
        Object.entries([content].flat()[idx]).forEach(([k,v]) => rObj[rn.toLowerCase()][k] = Array.isArray(v) ? 'array' : typeof v);
    });

    /* Build object for Handlebars template */
    const obj = {
        version: options.version ?? '3.0.3',
        title: options.title ?? 'Autogenerated Api',
        description: options.description ?? 'Generated with OAS TOOLS CLI',
        resource: options.resourceName.map((rn) => rn.toLowerCase()),
        Resource:  options.resourceName.map((rn) => rn.charAt(0).toUpperCase() + rn.slice(1)),
        resources: options.resourceName.map((rn) => `${rn.toLowerCase()}s`),
        Resources: options.resourceName.map((rn) => `${rn.charAt(0).toUpperCase() + rn.slice(1)}s`),
        operations: newOpObj,
        id: options.idProperty,
        resourceObj: rObj
    }
    
    /* Register lookup Prop in handlebars */
    Handlebars.registerHelper('lookupProp', function (obj, key, prop) {
        return obj[key] && obj[key][prop];
     });

    /* Register OR operation in handlebars */
    Handlebars.registerHelper('or', function (v1, v2, v3) {  
        return v1 || v2 || v3;
    });

    /* Register EQUALS operation in handlebars */
    Handlebars.registerHelper('eq', function (v1, v2) {  
        return v1 === v2;
    });

    /* Render template and write file */
    const template = Handlebars.compile(fs.readFileSync(`${dirName}/../templates/file/oas-doc.hbs`).toString());
    const pathName = (options.pathName ?? 'oas-doc.yaml').replace('.yaml', options.json ? '.json' : '.yaml');
    const file = template(obj);
    fs.writeFileSync(pathName, options.json ? JSON.stringify(jsyaml.load(file), null, 2) : file);
}