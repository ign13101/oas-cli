{{#if options.container}}
{{#if options.esm}}
import server from 'server.js';

{{else}}
const server = require('./server');
{{/if}}
const env = process.env.NODE_ENV ? process.env.NODE_ENV : 'production';

server.deploy(env).catch(err => { console.log(err); });

// quit on ctrl-c when running docker in terminal
process.on('SIGINT', function onSigint () {
  console.log(`[${new Date().toISOString()}] Got SIGINT (aka ctrl-c in docker). Graceful shutdown`);
  shutdown();
});

// quit properly on docker stop
process.on('SIGTERM', function onSigterm () {
  console.log(`[${new Date().toISOString()}] Got SIGTERM (docker container stop). Graceful shutdown`);
  shutdown();
});

const shutdown = () => {
  server.undeploy();
};
{{else}}{{#if options.esm}}
import http from "http";
import express from "express";
import { initialize{{#if options.installModule}}, use{{/if}} } from "@oas-tools/core";
{{#if options.installModule}}import {{options.installModule.moduleName}} from '{{options.installModule.importName}}';{{/if}}

{{else}}
const http = require('http');
const express = require("express");
const { initialize{{#if options.installModule}}, use{{/if}} } = require('@oas-tools/core');
{{#if options.installModule}}const {{options.installModule.moduleName}} = require('{{options.installModule.importName}}');{{/if}}

{{/if}}
const serverPort = {{#if options.port}}{{options.port}}{{else}}8080{{/if}};
const app = express();
app.use(express.json({limit: '50mb'}));

const config = {
    middleware: {
        security: {
            auth: {
                {{#each oasFile.components.securitySchemes}}
                {{@key}}: () => { /* no-op */ },
                {{/each}}
            }
        }
    }
}

{{#if options.installModule}}use({{options.installModule.moduleName}}){{/if}}
initialize(app, config).then(() => {
    http.createServer(app).listen(serverPort, () => {
    console.log("\nApp running at http://localhost:" + serverPort);
    console.log("________________________________________________________________");
    if (config.middleware.swagger?.disable !== false) {
        console.log('API docs (Swagger UI) available on http://localhost:' + serverPort + '/docs');
        console.log("________________________________________________________________");
    }
    });
});
{{/if}}